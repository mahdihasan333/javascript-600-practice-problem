// 3 practice problem

// ১. ইভেন্ট লুপ কীভাবে কাজ করে, বিস্তারিত ব্যাখ্যা কর।
// জাভাস্ক্রিপ্ট একসাথে একটাই কাজ করতে পারে (কারণ এটা সিঙ্গেল থ্রেডেড)। তবুও এটা অনেক কাজ একসাথে করার মতো আচরণ করে, আর সেটা সম্ভব হয় Event Loop-এর কারণে। প্রথমে যেকোনো সোজা (synchronous) কাজ Call Stack-এ যায়। যখন কোনো asynchronous কাজ (যেমন setTimeout, fetch) আসে, সেটা সরাসরি Call Stack-এ না গিয়ে Web API-তে চলে যায়। কাজ শেষে সেই কাজের callback পাঠানো হয় Callback Queue-তে। Event Loop সবসময় দেখে Call Stack খালি আছে কিনা। যদি খালি থাকে, তাহলে Callback Queue থেকে যেই কাজ রেডি হয়ে বসে আছে, সেটা নিয়ে Call Stack-এ পাঠায়। এইভাবে একটার পর একটা কাজ ঠিক সময়ে হয়, কিন্তু একসাথে ব্লক না করে। তাই আমাদের মনে হয় অনেক কিছু একসাথে হচ্ছে।




// ২. call stack আর callback queue-এর মধ্যে ডিফারেন্স কী।
// Call Stack হচ্ছে সেই জায়গা যেখানে সব সোজা (synchronous) কাজ রাখা হয়। যখন কোনো ফাংশন কল হয়, সেটা সরাসরি Call Stack-এ যায়। ফাংশনের কাজ শেষ হলে সেটা Stack থেকে বের হয়ে যায়। অন্যদিকে, Callback Queue হচ্ছে অপেক্ষার সিরিয়াল যেখানে asynchronous কাজ শেষ হয়ে callback আকারে বসে থাকে। যেমন setTimeout-এর কাজ শেষ হলে, তার ভিতরের ফাংশনটা Callback Queue-তে গিয়ে বসে থাকে।Call Stack কাজ করে LIFO (Last In, First Out) নিয়মে যেটা শেষে ঢোকে, সেটা আগে বের হয়। আর Callback Queue কাজ করে FIFO (First In, First Out) নিয়মে যেটা আগে আসে, সেটা আগে Call Stack-এ পাঠানো হয়। Event Loop-ই এই দুইটার মাঝে সমন্বয় করে কাজ করে। যখন Call Stack খালি থাকে, তখন Callback Queue থেকে কাজ তুলে এনে Stack-এ পাঠায়।




// ৩. জাভাস্ক্রিপ্ট যদি সিঙ্গেল থ্রেডেড হয়, তাহলে asynchronous কাজগুলো কীভাবে হ্যান্ডেল করে?
// জাভাস্ক্রিপ্ট সিঙ্গেল থ্রেডেড মানে একসাথে একটা কাজই করতে পারে।  তাহলে setTimeout, fetch এর মতো asynchronous কাজ কিভাবে হয়? এই কাজগুলো সরাসরি Call Stack-এ না গিয়ে Web API-তে যায়। ওখানে নির্দিষ্ট সময় বা কাজ শেষে Callback Queue-তে callback পাঠানো হয়। Event Loop তখন Call Stack ফাঁকা থাকলে ওই callback নিয়ে Call Stack-এ পাঠায় এবং কাজ এক্সিকিউট হয়। এইভাবে JavaScript কোনো কাজ আটকে না রেখে, সব কাজ সুন্দরভাবে ধারাবাহিকভাবে সামলে নিতে পারে।